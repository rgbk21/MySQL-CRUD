package com.example.demo.web.controller;

import com.example.demo.dao.StudentRepository;
import com.example.demo.model.Student;
import com.example.demo.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/*
Unlike the traditional Spring @Controller annotation, the @RestController annotation doesn't require you as a developer
to return a ResponseBody class from your method in the controller class. This is all handled by
the presence of the @RestController annotation, which includes the @ResponseBody annotation.
 */
@Controller // indicates that the data returned by each method will be written straight into the response body instead of rendering a template.
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class StudentController {

    // This means to get the bean called studentRepository which is auto-generated by Spring,
    // we will use it to handle the data
    @Autowired
    private StudentRepository studentRepository;

    @Autowired
    private StudentService studentService;

    @RequestMapping(method = RequestMethod.GET, value = "/students")
    @ResponseBody
    public List<Student> getAllStudents(){
        List<Student> list = studentService.getAllStudents();
        if (list != null) {
            return list;
        } else {
            throw new RuntimeException();
        }
    }

    // This returns a JSON or XML with the students
    @RequestMapping(value = "/students/{id}", method = RequestMethod.GET)
    @ResponseBody
    public Student getStudentById(@PathVariable("id") Integer id){
        Student student = studentService.getStudentById(id);

        return student;
    }

    // @RequestParam means it is a parameter from the GET or POST request
    // @ResponseBody means the returned String is the response, not a view name
    @PostMapping(path="/students") // Map ONLY POST Requests
    public ResponseEntity<Student> addNewStudent(@Validated @RequestBody Student student){
        Student s = studentService.addNewStudent(student);
        return ResponseEntity.status(HttpStatus.CREATED).body(s);
    }

    @PutMapping("/students/{id}")
    ResponseEntity<Student> replaceStudent(@RequestBody Student newStudent, @PathVariable Integer id) {

        Student student = studentService.replaceStudent(newStudent, id);
        return ResponseEntity.ok(student);

    }

    @DeleteMapping("/students/{id}")
    ResponseEntity<String> deleteStudentById(@PathVariable Integer id) {
        if (studentService.deleteStudentById(id)) {
            return ResponseEntity.ok(String.format("Student with id %s deleted", id));
        } else {
            return ResponseEntity.ok(String.format("Student with id %s not found", id));
        }
    }

}
