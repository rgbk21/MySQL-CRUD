package com.example.demo.controller;

import com.example.demo.repository.StudentRepository;
import com.example.demo.model.Student;
import com.example.demo.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/*
Unlike the traditional Spring @Controller annotation, the @RestController annotation doesn't require you as a developer
to return a ResponseBody class from your method in the controller class. This is all handled by
the presence of the @RestController annotation, which includes the @ResponseBody annotation.
 */
@RestController // indicates that the data returned by each method will be written straight into the response body instead of rendering a template.
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class StudentController {

    // This means to get the bean called studentRepository which is auto-generated by Spring,
    // we will use it to handle the data
    @Autowired
    private StudentRepository studentRepository;

    @Autowired
    private StudentService studentService;

    // This returns a JSON or XML with the students
    @GetMapping(path="/students")
    public ResponseEntity<List<Student>> getAllStudents(){
        return ResponseEntity.ok(studentService.getAllStudents());
    }

    // This returns a JSON or XML with the students
    @GetMapping(path="/students/{id}")
    public ResponseEntity<Student> getStudentById(@PathVariable Integer id){
        Student student = studentService.getStudentById(id);

        if (student == null){
            throw new StudentNotFoundException(id);
        }

        return ResponseEntity.ok(student);
    }

    // @RequestParam means it is a parameter from the GET or POST request
    // @ResponseBody means the returned String is the response, not a view name
    @PostMapping(path="/students") // Map ONLY POST Requests
    public ResponseEntity<Student> addNewStudent(@RequestBody Student student){
        return ResponseEntity.ok(studentService.addNewStudent(student));
    }

    @PutMapping("/students/{id}")
    ResponseEntity<Student> replaceStudent(@RequestBody Student newStudent, @PathVariable Integer id) {

        Student student = studentService.replaceStudent(newStudent, id);

        return ResponseEntity.ok(student);

    }

    @DeleteMapping("/students/{id}")
    void deleteStudentById(@PathVariable Integer id) {
        studentRepository.deleteById(id);
    }

}
